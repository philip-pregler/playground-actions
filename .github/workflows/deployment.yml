name: Deployment

on:
  push:
    branches: [ task/pipeline_copy ]

jobs:

  test:
    runs-on: ubuntu-latest
    env:
      CI: true
    
#    services:
#      dynamodb:
#        image: amazon/dynamodb-local
#        ports:
#          - 8000:8000
    
    steps:
      - uses: actions/checkout@v4

      - name: Set up .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.200'

      - name: Display .NET version
        run: dotnet --version
      
      - name: Install dependencies
        run: |
          dotnet restore webapi/webapi.csproj
          dotnet restore webapi.test/webapi.test.csproj
          
      - name: Clean the project
        run: dotnet clean

#      - name: Setup DynamoDB Local
#        run: |
#          docker run -d -p 8000:8000 --name dynamodb-local \
#            -e AWS_ACCESS_KEY_ID=fakeMyKeyId \
#            -e AWS_SECRET_ACCESS_KEY=fakeSecretAccessKey \
#            amazon/dynamodb-local -inMemory -region us-east-1
#          echo "Waiting for DynamoDB Local to start..."
#          docker logs dynamodb-local
#          while ! curl -s http://localhost:8000; do
#            echo "Waiting for DynamoDB Local to respond..."
#            sleep 5
#          done
#          echo "DynamoDB Local is ready!"
      
      #- name: Build
      #  run: |
      #    dotnet build --no-restore webapi/webapi.csproj
      #    dotnet build --no-restore webapi.test/webapi.test.csproj

      - name: Setup DynamoDB Local
        uses: rrainn/dynamodb-action@v4.0.0
        with:
          port: 8080
          cors: '*'
          sharedDb: true

#      - name: Setup DynamoDB Local
#        run: docker run -d -p 8000:8000 amazon/dynamodb-local:latest
#        env:
#          AWS_ACCESS_KEY_ID: fakeMyKeyId
#          AWS_SECRET_ACCESS_KEY: fakeSecretAccessKey

      - name: Verify DynamoDB Local is running
        run: |
          docker ps -a | grep dynamodb-local
          echo "Waiting for DynamoDB Local to start..."
          sleep 10
          curl -X POST http://localhost:8080 -H "Content-Type: application/x-amz-json-1.0" \
            -H "X-Amz-Target: DynamoDB_20120810.CreateTable" \
            -d '{
            "TableName": "TestTable",
            "AttributeDefinitions": [
              {
                "AttributeName": "Id",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "Id",
                "KeyType": "HASH"
              }
            ],
            "ProvisionedThroughput": {
              "ReadCapacityUnits": 1,
              "WriteCapacityUnits": 1
            }
          }'

      #          while ! curl -s http://localhost:8000; do
#            echo "Waiting for DynamoDB Local to respond..."
#            sleep 5
#          done
#          echo "DynamoDB Local is ready!"

      - name: Run tests
        run: |
          dotnet test --no-build --verbosity normal --logger trx --collect "Code coverage" webapi.test/webapi.test.csproj
          if [ $? -ne 0 ]; then
            echo "Tests failed. Printing test results:"
            dotnet test --no-build --verbosity normal --logger console --collect "Code coverage" webapi.test/webapi.test.csproj
          fi
        env:
          DYNAMODB_ENDPOINT: http://localhost:8080
        continue-on-error: false